steps:
  - task: DownloadPipelineArtifact@1
    displayName: Download signed installer
    inputs:
      buildType: 'current'
      artifactName: 'tmp.macinstaller_signed'
      downloadPath: '$(Build.StagingDirectory)/pkg'

  - task: DownloadPipelineArtifact@1
    displayName: Download signed payload
    inputs:
      buildType: 'current'
      artifactName: 'tmp.macpayload_signed'
      downloadPath: '$(Build.StagingDirectory)/payload'

  - task: DownloadPipelineArtifact@1
    displayName: Download symbols
    inputs:
      buildType: 'current'
      artifactName: 'tmp.macsymbols'
      downloadPath: '$(Build.StagingDirectory)/symbols'

  # Skip notarization until we can preserve the hardened runtime bit and sign the .NET runtime bits
  # Tracked: https://github.com/microsoft/Git-Credential-Manager-Core/issues/108
  #- script: src/osx/SignFiles.Mac/notarize-pkg.sh -id "$(AppleId)" -p "$(AppleIdPassword)" -pkg "$(Build.StagingDirectory)"/pkg/*.pkg
  #  displayName: Notarize and staple installer package

  - script: |
      mkdir -p "$(Build.StagingDirectory)/publish/payload" "$(Build.StagingDirectory)/publish/payload.sym"
      cp -f  "$(Build.StagingDirectory)"/pkg/*.pkg "$(Build.StagingDirectory)/publish/"
      cp -Rf "$(Build.StagingDirectory)/payload/"  "$(Build.StagingDirectory)/publish/payload/"
      cp -Rf "$(Build.StagingDirectory)/symbols/"  "$(Build.StagingDirectory)/publish/payload.sym/"
    displayName: Prepare final build artifacts

  - script: dotnet tool install --global nbgv
    displayName: Install Nerdbank.GitVersioning tool

  - script: nbgv cloud --common-vars
    displayName: Set version variables

  - task: ArchiveFiles@2
    displayName: Create payload archive
    inputs:
      rootFolderOrFile: '$(Build.StagingDirectory)/publish/payload/'
      includeRootFolder: false
      archiveType: 'tar'
      archiveFile: '$(Build.StagingDirectory)/publish/gcmcore-osx-$(GitBuildVersion).tar.gz'
      replaceExistingArchive: true

  - task: ArchiveFiles@2
    displayName: Create symbol archive
    inputs:
      rootFolderOrFile: '$(Build.StagingDirectory)/publish/payload.sym/'
      includeRootFolder: false
      archiveType: 'tar'
      archiveFile: '$(Build.StagingDirectory)/publish/symbols-osx.tar.gz'
      replaceExistingArchive: true

  - task: PublishPipelineArtifact@0
    displayName: Publish signed installer artifacts
    inputs:
      artifactName: 'Installer.Mac.Signed'
      targetPath: '$(Build.StagingDirectory)/publish'
