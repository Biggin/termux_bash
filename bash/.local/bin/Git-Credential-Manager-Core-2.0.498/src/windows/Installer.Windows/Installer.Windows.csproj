<Project>
  <!-- Implicit SDK props import -->
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <TargetFramework>net472</TargetFramework>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <PayloadPath>$(PlatformOutPath)Payload.Windows\bin\$(Configuration)\net472\win-x86</PayloadPath>
    <EnableDefaultItems>false</EnableDefaultItems>
  </PropertyGroup>

  <ItemGroup>
    <None Include="Setup.iss" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="../Payload.Windows/Payload.Windows.csproj" ReferenceOutputAssembly="false" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Tools.InnoSetup" Version="6.0.5" />
    <PackageReference Include="MicroBuild.Core" Version="0.2.0">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <!-- Since the installer file name includes the generated build number from Nerdbank.GitVersioning
       we must create the FilesToSign item inside of a target that depends on GetBuildVersion and runs
       before we attempt to sign any files or validate they exist. -->
  <Target Name="CreateFilesToSignItems" DependsOnTargets="GetBuildVersion" BeforeTargets="PrepareForRun">
    <ItemGroup>
      <FilesToSign Include="$(OutDir)gcmcore*-win-x86-$(BuildVersion).exe">
        <Authenticode>Microsoft400</Authenticode>
        <InProject>false</InProject>
      </FilesToSign>
    </ItemGroup>
  </Target>

  <!-- Implicit SDK targets import (so we can override the default targets below) -->
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <!-- Check all the files to sign exist -->
  <Target Name="ValidateSigningDependencies" AfterTargets="PrepareForRun" Inputs="@(FilesToSign)" Outputs="$(OutDir)validatesign.timestamp">
    <Error Text="File to sign not found: %(FilesToSign.Identity)" Condition="!Exists('%(FilesToSign.Identity)')" />
    <WriteLinesToFile File="$(OutDir)validatesign.timestamp" Lines="@(FilesToSign)" Overwrite="true" />
  </Target>

  <Target Name="CoreCompile" Condition="'$(OSPlatform)'=='windows'">
    <PropertyGroup>
      <InnoSetupCommandSystem>$(NuGetPackageRoot)Tools.InnoSetup\6.0.5\tools\ISCC.exe /DPayloadDir=$(PayloadPath) /DInstallTarget=system Setup.iss /O$(OutputPath)</InnoSetupCommandSystem>
      <InnoSetupCommandUser>$(NuGetPackageRoot)Tools.InnoSetup\6.0.5\tools\ISCC.exe /DPayloadDir=$(PayloadPath) /DInstallTarget=user Setup.iss /O$(OutputPath)</InnoSetupCommandUser>
    </PropertyGroup>
    <Message Text="$(InnoSetupCommandSystem)" Importance="High" />
    <Exec Command="$(InnoSetupCommandSystem)" />
    <Message Text="$(InnoSetupCommandUser)" Importance="High" />
    <Exec Command="$(InnoSetupCommandUser)" />
  </Target>

  <!-- We don't produce or copy any dependent files for this project -->
  <Target Name="CopyFilesToOutputDirectory" />
  <Target Name="CoreClean">
    <RemoveDir Directories="$(ProjectOutPath)" />
  </Target>

</Project>
